/*
 * Copyright (c) 2019-2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "../../test_utils.cuh"

#include <raft/core/device_mdarray.hpp>
#include <raft/core/device_mdspan.hpp>
#include <raft/core/mdspan.hpp>
#include <raft/core/mdspan_types.hpp>
#include <raft/core/resources.hpp>
#include <raft/matrix/init.cuh>
#include <raft/random/rmat_rectangular_generator.cuh>
#include <raft/random/rng.cuh>
#include <raft/random/rng_state.hpp>
#include <raft/sparse/convert/csr.cuh>
#include <raft/sparse/coo.hpp>
#include <raft/sparse/linalg/degree.cuh>
#include <raft/sparse/linalg/symmetrize.cuh>
#include <raft/sparse/op/reduce.cuh>
#include <raft/sparse/op/sort.cuh>
#include <raft/sparse/solver/lanczos_types.hpp>
#include <raft/spectral/eigen_solvers.cuh>
#include <raft/spectral/matrix_wrappers.hpp>
#include <raft/util/cudart_utils.hpp>

#include <cuda_runtime.h>
#include <driver_types.h>

#include <gtest/gtest.h>
#include <sys/types.h>
#include <test_utils.h>

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <iostream>

namespace raft::sparse {

template <typename IndexType, typename ValueType>
struct lanczos_inputs {
  int n_components;
  int restartiter;
  int maxiter;
  int conv_n_iters;
  float conv_eps;
  float tol;
  solver::LANCZOS_WHICH which;
  uint64_t seed;
  std::vector<IndexType> rows;  // indptr
  std::vector<IndexType> cols;  // indices
  std::vector<ValueType> vals;  // data
  std::vector<ValueType> expected_eigenvalues;
};

template <typename IndexType, typename ValueType>
struct rmat_lanczos_inputs {
  int n_components;
  int restartiter;
  int maxiter;
  int conv_n_iters;
  float conv_eps;
  float tol;
  solver::LANCZOS_WHICH which;
  uint64_t seed;
  int r_scale;
  int c_scale;
  float sparsity;
  std::vector<ValueType> expected_eigenvalues;
};

template <typename IndexType, typename ValueType>
class rmat_lanczos_tests
  : public ::testing::TestWithParam<rmat_lanczos_inputs<IndexType, ValueType>> {
 public:
  rmat_lanczos_tests()
    : params(::testing::TestWithParam<rmat_lanczos_inputs<IndexType, ValueType>>::GetParam()),
      stream(resource::get_cuda_stream(handle)),
      rng(params.seed),
      expected_eigenvalues(raft::make_device_vector<ValueType, uint32_t, raft::col_major>(
        handle, params.n_components)),
      r_scale(params.r_scale),
      c_scale(params.c_scale),
      sparsity(params.sparsity)
  {
  }

 protected:
  void SetUp() override
  {
    raft::copy(expected_eigenvalues.data_handle(),
               params.expected_eigenvalues.data(),
               params.n_components,
               stream);
  }

  void TearDown() override {}

  void Run()
  {
    int runtimeVersion;
    cudaError_t result = cudaRuntimeGetVersion(&runtimeVersion);

    if (result == cudaSuccess) {
      int major = runtimeVersion / 1000;
      int minor = (runtimeVersion % 1000) / 10;

      // Skip gtests for CUDA 11.4.x and below because hard-coded results are causing issues.
      // See https://github.com/rapidsai/raft/issues/2519 for more information.
      if (major == 11 && minor <= 4) { GTEST_SKIP(); }
    }

    uint64_t n_edges   = sparsity * ((long long)(1 << r_scale) * (long long)(1 << c_scale));
    uint64_t n_nodes   = 1 << std::max(r_scale, c_scale);
    uint64_t theta_len = std::max(r_scale, c_scale) * 4;

    auto theta = raft::make_device_vector<ValueType, uint32_t, raft::row_major>(handle, theta_len);
    raft::random::uniform<ValueType>(handle, rng, theta.view(), 0, 1);

    auto out =
      raft::make_device_matrix<IndexType, uint32_t, raft::row_major>(handle, n_edges * 2, 2);
    auto out_src = raft::make_device_vector<IndexType, uint32_t, raft::row_major>(handle, n_edges);
    auto out_dst = raft::make_device_vector<IndexType, uint32_t, raft::row_major>(handle, n_edges);

    raft::random::RngState rng1{params.seed};

    raft::random::rmat_rectangular_gen<IndexType, ValueType>(handle,
                                                             rng1,
                                                             make_const_mdspan(theta.view()),
                                                             out.view(),
                                                             out_src.view(),
                                                             out_dst.view(),
                                                             r_scale,
                                                             c_scale);

    raft::device_vector<ValueType, uint32_t, raft::row_major> out_data =
      raft::make_device_vector<ValueType, uint32_t, raft::row_major>(handle, n_edges);
    raft::matrix::fill<ValueType>(handle, out_data.view(), 1.0);
    raft::sparse::COO<ValueType, IndexType, IndexType> coo(stream);

    raft::sparse::op::coo_sort<ValueType, int>(n_nodes,
                                               n_nodes,
                                               n_edges,
                                               out_src.data_handle(),
                                               out_dst.data_handle(),
                                               out_data.data_handle(),
                                               stream);
    raft::sparse::op::max_duplicates<IndexType, ValueType>(handle,
                                                           coo,
                                                           out_src.data_handle(),
                                                           out_dst.data_handle(),
                                                           out_data.data_handle(),
                                                           (IndexType)n_edges,
                                                           (IndexType)n_nodes,
                                                           (IndexType)n_nodes);

    raft::sparse::COO<ValueType, IndexType, IndexType> symmetric_coo(stream);
    raft::sparse::linalg::symmetrize(
      handle, coo.rows(), coo.cols(), coo.vals(), coo.n_rows, coo.n_cols, coo.nnz, symmetric_coo);

    raft::device_vector<IndexType, uint32_t, raft::row_major> row_indices =
      raft::make_device_vector<IndexType, uint32_t, raft::row_major>(handle,
                                                                     symmetric_coo.n_rows + 1);
    raft::sparse::convert::sorted_coo_to_csr(symmetric_coo.rows(),
                                             symmetric_coo.nnz,
                                             row_indices.data_handle(),
                                             symmetric_coo.n_rows + 1,
                                             stream);

    int n_components = params.n_components;

    raft::device_vector<ValueType, uint32_t, raft::row_major> v0 =
      raft::make_device_vector<ValueType, uint32_t, raft::row_major>(handle, symmetric_coo.n_rows);

    raft::random::uniform<ValueType>(handle, rng, v0.view(), 0, 1);
    std::tuple<IndexType, ValueType, IndexType> stats;

    raft::device_vector<ValueType, uint32_t, raft::col_major> eigenvalues =
      raft::make_device_vector<ValueType, uint32_t, raft::col_major>(handle, n_components);
    raft::device_matrix<ValueType, uint32_t, raft::col_major> eigenvectors =
      raft::make_device_matrix<ValueType, uint32_t, raft::col_major>(
        handle, symmetric_coo.n_rows, n_components);

    raft::spectral::matrix::sparse_matrix_t<IndexType, ValueType> const csr_m{
      handle,
      row_indices.data_handle(),
      symmetric_coo.cols(),
      symmetric_coo.vals(),
      symmetric_coo.n_rows,
      (uint64_t)symmetric_coo.nnz};
    raft::sparse::solver::lanczos_solver_config<ValueType> config{
      n_components, params.maxiter, params.restartiter, params.tol, params.which, rng.seed};

    auto csr_structure =
      raft::make_device_compressed_structure_view<IndexType, IndexType, IndexType>(
        const_cast<IndexType*>(row_indices.data_handle()),
        const_cast<IndexType*>(symmetric_coo.cols()),
        symmetric_coo.n_rows,
        symmetric_coo.n_rows,
        symmetric_coo.nnz);

    auto csr_matrix = raft::make_device_csr_matrix_view<ValueType, IndexType, IndexType, IndexType>(
      const_cast<ValueType*>(symmetric_coo.vals()), csr_structure);

    std::get<0>(stats) =
      raft::sparse::solver::lanczos_compute_smallest_eigenvectors<IndexType, ValueType>(
        handle,
        config,
        csr_matrix,
        std::make_optional(v0.view()),
        eigenvalues.view(),
        eigenvectors.view());

    ASSERT_TRUE(raft::devArrMatch<ValueType>(eigenvalues.data_handle(),
                                             expected_eigenvalues.data_handle(),
                                             n_components,
                                             raft::CompareApprox<ValueType>(1e-5),
                                             stream));
  }

 protected:
  rmat_lanczos_inputs<IndexType, ValueType> params;
  raft::resources handle;
  cudaStream_t stream;
  raft::random::RngState rng;
  int r_scale;
  int c_scale;
  float sparsity;
  raft::device_vector<ValueType, uint32_t, raft::col_major> expected_eigenvalues;
};

template <typename IndexType, typename ValueType>
class lanczos_tests : public ::testing::TestWithParam<lanczos_inputs<IndexType, ValueType>> {
 public:
  lanczos_tests()
    : params(::testing::TestWithParam<lanczos_inputs<IndexType, ValueType>>::GetParam()),
      stream(resource::get_cuda_stream(handle)),
      n(params.rows.size() - 1),
      nnz(params.vals.size()),
      rng(params.seed),
      rows(raft::make_device_vector<IndexType, uint32_t, raft::row_major>(handle, n + 1)),
      cols(raft::make_device_vector<IndexType, uint32_t, raft::row_major>(handle, nnz)),
      vals(raft::make_device_vector<ValueType, uint32_t, raft::row_major>(handle, nnz)),
      v0(raft::make_device_vector<ValueType, uint32_t, raft::row_major>(handle, n)),
      eigenvalues(raft::make_device_vector<ValueType, uint32_t, raft::col_major>(
        handle, params.n_components)),
      eigenvectors(raft::make_device_matrix<ValueType, uint32_t, raft::col_major>(
        handle, n, params.n_components)),
      expected_eigenvalues(
        raft::make_device_vector<ValueType, uint32_t, raft::col_major>(handle, params.n_components))
  {
  }

 protected:
  void SetUp() override
  {
    raft::copy(rows.data_handle(), params.rows.data(), n + 1, stream);
    raft::copy(cols.data_handle(), params.cols.data(), nnz, stream);
    raft::copy(vals.data_handle(), params.vals.data(), nnz, stream);
    raft::copy(expected_eigenvalues.data_handle(),
               params.expected_eigenvalues.data(),
               params.n_components,
               stream);
  }

  void TearDown() override {}

  void Run()
  {
    int runtimeVersion;
    cudaError_t result = cudaRuntimeGetVersion(&runtimeVersion);

    if (result == cudaSuccess) {
      int major = runtimeVersion / 1000;
      int minor = (runtimeVersion % 1000) / 10;

      // Skip gtests for CUDA 11.4.x and below because hard-coded results are causing issues.
      // See https://github.com/rapidsai/raft/issues/2519 for more information.
      if (major == 11 && minor <= 4) { GTEST_SKIP(); }
    }

    raft::random::uniform<ValueType>(handle, rng, v0.view(), 0, 1);
    std::tuple<IndexType, ValueType, IndexType> stats;

    raft::sparse::solver::lanczos_solver_config<ValueType> config{
      params.n_components, params.maxiter, params.restartiter, params.tol, params.which, rng.seed};
    auto csr_structure =
      raft::make_device_compressed_structure_view<IndexType, IndexType, IndexType>(
        const_cast<IndexType*>(rows.data_handle()),
        const_cast<IndexType*>(cols.data_handle()),
        n,
        n,
        nnz);

    auto csr_matrix = raft::make_device_csr_matrix_view<ValueType, IndexType, IndexType, IndexType>(
      const_cast<ValueType*>(vals.data_handle()), csr_structure);

    std::get<0>(stats) =
      raft::sparse::solver::lanczos_compute_smallest_eigenvectors<IndexType, ValueType>(
        handle,
        config,
        csr_matrix,
        std::make_optional(v0.view()),
        eigenvalues.view(),
        eigenvectors.view());

    ASSERT_TRUE(raft::devArrMatch<ValueType>(eigenvalues.data_handle(),
                                             expected_eigenvalues.data_handle(),
                                             params.n_components,
                                             raft::CompareApprox<ValueType>(1e-5),
                                             stream));
  }

 protected:
  lanczos_inputs<IndexType, ValueType> params;
  raft::resources handle;
  cudaStream_t stream;
  int n;
  int nnz;
  raft::random::RngState rng;
  raft::device_vector<IndexType, uint32_t, raft::row_major> rows;
  raft::device_vector<IndexType, uint32_t, raft::row_major> cols;
  raft::device_vector<ValueType, uint32_t, raft::row_major> vals;
  raft::device_vector<ValueType, uint32_t, raft::row_major> v0;
  raft::device_vector<ValueType, uint32_t, raft::col_major> eigenvalues;
  raft::device_matrix<ValueType, uint32_t, raft::col_major> eigenvectors;
  raft::device_vector<ValueType, uint32_t, raft::col_major> expected_eigenvalues;
};

template <typename IndexType>
std::vector<IndexType> rows = {
  0,    29,   51,   74,   103,  120,  142,  161,  181,  199,  217,  235,  254,  271,  295,
  314,  338,  364,  388,  405,  417,  437,  458,  478,  501,  511,  522,  539,  554,  574,
  590,  615,  638,  651,  679,  698,  717,  725,  741,  761,  779,  799,  817,  833,  850,
  864,  879,  896,  921,  938,  961,  985,  1004, 1019, 1035, 1048, 1070, 1084, 1102, 1123,
  1138, 1165, 1182, 1203, 1215, 1232, 1253, 1272, 1289, 1310, 1327, 1344, 1358, 1386, 1406,
  1428, 1450, 1470, 1485, 1503, 1516, 1529, 1553, 1571, 1596, 1614, 1629, 1647, 1676, 1695,
  1709, 1732, 1750, 1765, 1782, 1803, 1818, 1832, 1846, 1866, 1884};

template <typename IndexType>
std::vector<IndexType> cols = {
  0,  3,  5,  8,  14, 23, 29, 31, 33, 34, 35, 36, 39, 47, 49, 50, 51, 61, 62, 63, 75, 76, 80, 85,
  88, 91, 92, 94, 96, 1,  3,  6,  7,  8,  15, 19, 31, 35, 44, 48, 60, 65, 69, 72, 73, 76, 78, 80,
  85, 90, 97, 17, 26, 28, 41, 42, 43, 45, 48, 51, 52, 57, 58, 59, 62, 63, 65, 67, 68, 74, 86, 90,
  91, 92, 0,  1,  3,  4,  11, 15, 16, 18, 21, 30, 33, 35, 37, 40, 46, 49, 54, 55, 57, 59, 60, 66,
  67, 72, 76, 81, 84, 87, 88, 3,  10, 16, 23, 32, 34, 37, 39, 45, 47, 50, 57, 60, 61, 72, 83, 87,
  0,  10, 18, 31, 32, 33, 43, 52, 55, 56, 58, 60, 63, 67, 68, 72, 76, 77, 82, 86, 90, 92, 1,  16,
  21, 23, 24, 29, 30, 37, 47, 52, 53, 55, 56, 68, 69, 73, 83, 87, 94, 1,  11, 13, 21, 30, 33, 35,
  42, 61, 64, 65, 75, 78, 79, 81, 82, 89, 94, 95, 99, 0,  1,  12, 14, 16, 29, 49, 50, 56, 59, 64,
  66, 68, 72, 77, 87, 93, 98, 15, 26, 32, 33, 52, 53, 56, 58, 60, 64, 65, 70, 71, 81, 87, 93, 97,
  99, 4,  5,  21, 23, 26, 29, 34, 42, 56, 59, 64, 68, 71, 78, 83, 84, 87, 90, 3,  7,  11, 12, 21,
  23, 45, 47, 49, 55, 56, 75, 78, 79, 80, 83, 88, 90, 94, 8,  11, 15, 17, 24, 33, 34, 39, 41, 47,
  48, 53, 54, 61, 86, 93, 94, 7,  14, 15, 17, 22, 29, 30, 39, 41, 43, 45, 46, 47, 48, 55, 60, 62,
  72, 73, 77, 83, 84, 93, 98, 0,  8,  13, 18, 26, 33, 44, 45, 53, 54, 58, 72, 74, 75, 82, 87, 92,
  94, 98, 1,  3,  9,  12, 13, 16, 22, 26, 30, 58, 62, 68, 69, 73, 74, 75, 78, 80, 91, 93, 95, 96,
  97, 99, 3,  4,  6,  8,  15, 17, 18, 23, 25, 31, 42, 45, 47, 50, 55, 58, 60, 62, 65, 70, 72, 75,
  83, 84, 91, 92, 2,  12, 13, 16, 24, 26, 30, 31, 32, 33, 38, 42, 58, 60, 65, 68, 70, 74, 75, 85,
  92, 93, 94, 95, 3,  5,  14, 16, 20, 28, 33, 35, 51, 57, 62, 64, 69, 76, 85, 86, 91, 1,  30, 35,
  41, 48, 49, 50, 63, 65, 81, 88, 99, 18, 20, 24, 25, 26, 28, 29, 45, 61, 67, 72, 74, 75, 76, 80,
  85, 87, 94, 98, 99, 3,  6,  7,  10, 11, 24, 39, 43, 45, 47, 49, 52, 54, 55, 60, 65, 66, 68, 78,
  84, 89, 13, 15, 25, 29, 31, 32, 33, 36, 39, 41, 48, 49, 51, 52, 54, 58, 60, 75, 86, 87, 0,  4,
  6,  10, 11, 16, 25, 28, 30, 31, 37, 40, 41, 44, 51, 53, 58, 60, 66, 73, 80, 91, 92, 6,  12, 17,
  20, 21, 58, 73, 84, 92, 98, 16, 20, 22, 23, 34, 45, 46, 66, 78, 86, 92, 2,  9,  10, 14, 15, 17,
  20, 27, 29, 35, 50, 58, 64, 68, 73, 78, 88, 26, 29, 37, 48, 50, 53, 55, 56, 60, 67, 69, 71, 77,
  81, 88, 2,  18, 20, 23, 51, 55, 59, 63, 64, 67, 68, 72, 76, 77, 78, 83, 84, 87, 94, 98, 0,  6,
  8,  10, 13, 20, 22, 26, 27, 35, 49, 63, 73, 75, 86, 87, 3,  6,  7,  13, 15, 17, 19, 23, 31, 32,
  33, 39, 41, 45, 46, 47, 48, 61, 66, 68, 70, 79, 90, 95, 99, 0,  1,  5,  16, 17, 22, 23, 30, 32,
  45, 46, 47, 51, 53, 54, 60, 62, 66, 72, 79, 87, 94, 97, 4,  5,  9,  17, 22, 30, 31, 38, 51, 57,
  70, 79, 85, 0,  3,  5,  7,  9,  12, 14, 17, 18, 22, 30, 34, 37, 50, 55, 58, 60, 73, 79, 83, 87,
  89, 92, 93, 96, 97, 98, 99, 0,  4,  10, 12, 25, 33, 34, 38, 47, 52, 64, 65, 66, 68, 73, 81, 82,
  88, 91, 0,  1,  3,  7,  18, 19, 26, 29, 41, 50, 56, 57, 70, 72, 75, 82, 93, 95, 97, 0,  22, 46,
  62, 74, 76, 83, 86, 3,  4,  6,  23, 27, 33, 38, 39, 43, 55, 67, 71, 81, 85, 87, 90, 17, 32, 34,
  37, 40, 42, 43, 44, 46, 57, 59, 69, 72, 74, 79, 81, 87, 90, 92, 98, 0,  4,  12, 13, 21, 22, 30,
  37, 41, 60, 69, 73, 75, 82, 84, 90, 92, 99, 3,  23, 38, 41, 45, 46, 49, 54, 58, 59, 63, 67, 69,
  71, 76, 80, 81, 84, 93, 98, 2,  12, 13, 19, 22, 23, 30, 35, 39, 40, 51, 57, 70, 78, 83, 85, 90,
  94, 2,  7,  10, 16, 17, 38, 44, 47, 49, 64, 69, 76, 77, 79, 81, 83, 2,  5,  13, 21, 37, 38, 62,
  67, 68, 81, 82, 86, 87, 95, 96, 97, 98, 1,  14, 23, 38, 42, 51, 55, 71, 74, 75, 76, 77, 89, 96,
  2,  4,  11, 13, 14, 16, 20, 21, 25, 30, 31, 40, 60, 75, 94, 3,  13, 25, 30, 31, 36, 38, 40, 66,
  71, 72, 76, 81, 84, 88, 89, 95, 0,  4,  6,  11, 12, 13, 16, 21, 30, 31, 34, 42, 47, 49, 51, 55,
  65, 68, 70, 71, 73, 75, 84, 88, 95, 1,  2,  12, 13, 19, 22, 27, 30, 51, 56, 57, 72, 75, 79, 90,
  91, 98, 0,  3,  8,  11, 19, 21, 22, 29, 40, 42, 47, 49, 50, 55, 57, 61, 63, 77, 83, 88, 90, 91,
  93, 0,  4,  8,  16, 19, 26, 27, 33, 35, 49, 50, 52, 53, 55, 62, 65, 66, 68, 71, 78, 82, 90, 94,
  98, 0,  2,  18, 22, 23, 28, 31, 32, 41, 44, 47, 48, 56, 58, 69, 70, 83, 96, 98, 2,  5,  6,  9,
  21, 22, 34, 50, 62, 65, 66, 69, 72, 79, 84, 6,  9,  12, 14, 23, 27, 31, 50, 56, 58, 59, 67, 76,
  77, 81, 97, 3,  12, 14, 21, 22, 31, 40, 59, 67, 74, 81, 89, 90, 3,  5,  6,  11, 13, 16, 21, 27,
  28, 33, 37, 44, 47, 49, 50, 59, 71, 72, 83, 89, 91, 96, 5,  6,  8,  9,  10, 11, 27, 35, 48, 51,
  53, 62, 65, 74, 2,  3,  4,  18, 32, 35, 38, 41, 48, 49, 64, 66, 74, 86, 87, 94, 95, 98, 2,  5,
  9,  14, 15, 16, 17, 22, 23, 24, 26, 33, 40, 51, 53, 61, 70, 72, 81, 83, 85, 2,  3,  8,  10, 28,
  38, 40, 53, 54, 55, 68, 70, 81, 83, 98, 1,  3,  4,  5,  9,  13, 16, 17, 21, 22, 23, 27, 31, 33,
  39, 45, 60, 62, 70, 77, 80, 82, 83, 84, 85, 86, 98, 0,  4,  7,  12, 20, 30, 49, 58, 61, 62, 63,
  65, 72, 76, 83, 89, 91, 0,  2,  13, 15, 16, 18, 31, 36, 43, 50, 52, 56, 60, 61, 66, 72, 83, 87,
  89, 92, 93, 0,  2,  5,  19, 28, 29, 40, 49, 61, 63, 86, 90, 7,  8,  9,  10, 18, 26, 28, 34, 42,
  57, 72, 74, 82, 87, 88, 96, 99, 1,  2,  7,  9,  16, 17, 19, 21, 34, 47, 50, 52, 56, 61, 67, 83,
  89, 90, 95, 97, 99, 3,  8,  21, 23, 25, 30, 31, 34, 46, 50, 52, 57, 62, 79, 81, 85, 87, 90, 99,
  2,  3,  5,  20, 27, 28, 37, 40, 43, 53, 54, 65, 69, 82, 84, 89, 90, 2,  5,  6,  8,  10, 15, 17,
  21, 26, 28, 30, 34, 43, 47, 50, 59, 69, 70, 79, 88, 97, 1,  6,  15, 18, 27, 38, 39, 40, 42, 51,
  52, 67, 68, 71, 77, 80, 97, 9,  16, 17, 30, 32, 35, 41, 47, 51, 58, 59, 60, 68, 72, 77, 86, 93,
  9,  10, 27, 37, 40, 44, 46, 47, 50, 55, 69, 74, 87, 98, 1,  3,  4,  5,  8,  13, 14, 16, 20, 28,
  31, 35, 38, 46, 48, 52, 55, 58, 61, 62, 64, 70, 77, 78, 82, 86, 89, 99, 1,  6,  13, 15, 23, 24,
  26, 29, 33, 34, 39, 47, 76, 77, 83, 87, 88, 96, 98, 99, 2,  14, 15, 17, 20, 36, 38, 44, 54, 56,
  57, 64, 71, 80, 81, 85, 86, 87, 88, 92, 93, 95, 0,  7,  11, 14, 15, 16, 17, 20, 22, 29, 35, 39,
  44, 45, 47, 48, 78, 85, 90, 92, 94, 99, 0,  1,  3,  5,  18, 20, 28, 36, 40, 42, 44, 46, 53, 61,
  73, 80, 82, 84, 91, 95, 5,  8,  13, 27, 28, 42, 44, 49, 53, 60, 69, 70, 72, 73, 91, 1,  7,  10,
  11, 15, 21, 25, 26, 28, 41, 50, 72, 75, 81, 82, 87, 94, 96, 7,  11, 30, 31, 32, 33, 38, 42, 48,
  52, 66, 68, 82, 0,  1,  11, 15, 20, 23, 40, 60, 69, 74, 76, 80, 93, 3,  7,  9,  19, 27, 34, 37,
  38, 40, 42, 43, 46, 53, 54, 58, 59, 66, 74, 78, 81, 84, 87, 88, 91, 5,  7,  14, 34, 35, 39, 43,
  50, 60, 64, 67, 72, 76, 78, 79, 83, 84, 96, 4,  6,  10, 11, 13, 16, 28, 33, 36, 41, 42, 49, 51,
  55, 58, 59, 60, 61, 62, 65, 73, 82, 84, 86, 97, 3,  10, 13, 16, 21, 24, 28, 39, 40, 46, 47, 52,
  60, 67, 76, 81, 82, 83, 0,  1,  17, 18, 20, 32, 37, 41, 58, 60, 66, 74, 75, 90, 94, 2,  5,  12,
  18, 22, 25, 29, 36, 43, 57, 60, 63, 70, 72, 74, 83, 94, 99, 3,  4,  6,  8,  9,  10, 14, 20, 22,
  28, 29, 31, 33, 37, 38, 43, 57, 62, 64, 66, 71, 73, 74, 78, 81, 91, 94, 95, 99, 0,  3,  11, 19,
  26, 27, 34, 46, 47, 49, 64, 68, 73, 74, 81, 90, 94, 95, 97, 7,  21, 33, 44, 46, 54, 55, 61, 62,
  65, 67, 72, 91, 99, 1,  2,  5,  10, 11, 30, 37, 38, 39, 41, 48, 49, 50, 54, 63, 65, 66, 67, 75,
  85, 88, 91, 96, 0,  2,  15, 16, 18, 23, 34, 48, 49, 55, 61, 76, 77, 81, 87, 89, 90, 97, 0,  2,
  5,  14, 16, 17, 23, 24, 25, 33, 38, 39, 62, 74, 75, 8,  9,  12, 13, 15, 17, 33, 35, 40, 49, 62,
  70, 74, 80, 93, 98, 99, 0,  6,  7,  11, 12, 14, 17, 20, 28, 31, 41, 45, 50, 57, 75, 78, 85, 86,
  87, 88, 95, 7,  15, 17, 30, 35, 43, 46, 47, 57, 65, 74, 76, 87, 88, 94, 0,  15, 33, 43, 44, 51,
  55, 64, 73, 78, 82, 90, 96, 98, 1,  9,  15, 31, 33, 35, 43, 53, 65, 68, 69, 83, 88, 91, 8,  13,
  14, 20, 24, 28, 33, 38, 40, 43, 48, 50, 51, 57, 59, 60, 71, 73, 93, 96, 7,  9,  15, 19, 20, 30,
  33, 39, 64, 65, 66, 72, 73, 75, 86, 87, 89, 93};

template <typename ValueType>
std::vector<ValueType> vals = {
  0.8385492, 0.0887047, 0.4178915, 0.4859754, 0.4469863, 0.2195207, 0.3129920, 0.1031984, 0.2898832,
  0.3742032, 0.0522814, 0.3923617, 0.4283062, 0.2236069, 0.1620676, 0.0181036, 0.0722899, 0.2825163,
  0.2854958, 0.3136983, 0.4021524, 0.3556329, 0.4577443, 0.1463357, 0.3288944, 0.4404407, 0.3466910,
  0.2799277, 0.1813836, 0.4619252, 0.1622771, 0.2565850, 0.3349850, 0.4806673, 0.2912005, 0.2509201,
  0.6396587, 0.5977305, 0.1196116, 0.2077467, 0.0345871, 0.4918659, 0.4194439, 0.4487811, 0.1682306,
  0.3017929, 0.1373989, 0.3152796, 0.3640917, 0.0489285, 0.4335400, 0.0987368, 0.1548646, 0.2137529,
  0.0130792, 0.0752723, 0.1238085, 0.3553386, 0.4349648, 0.3818015, 0.4697597, 0.4478265, 0.2176154,
  0.3768051, 0.3741169, 0.0550861, 0.3733355, 0.0161616, 0.0404749, 0.0530627, 0.3932415, 0.2313439,
  0.4807387, 0.3860448, 0.0887047, 0.1622771, 0.2646495, 0.4319774, 0.0975544, 0.3953015, 0.4127654,
  0.3950751, 0.0630765, 0.3240158, 0.3895027, 0.0263783, 0.3096741, 0.0810854, 0.2185860, 0.2931856,
  0.4413908, 0.4933484, 0.3265684, 0.3630947, 0.3439550, 0.4709083, 0.4871525, 0.4059546, 0.2835062,
  0.2319805, 0.1080630, 0.1148512, 0.4250860, 0.4319774, 0.3417962, 0.1542346, 0.1705101, 0.3939655,
  0.2228894, 0.2561502, 0.1612249, 0.3348420, 0.7638237, 0.2223779, 0.1142358, 0.2221761, 0.1023570,
  0.0100264, 0.4906516, 0.4211857, 0.4178915, 0.2112697, 0.0841055, 0.3054300, 0.4681202, 0.3307955,
  0.2055745, 0.3013350, 0.0921099, 0.2272112, 0.4771985, 0.0400448, 0.4924752, 0.3142720, 0.3691756,
  0.2582222, 0.2400539, 0.4489491, 0.5111299, 0.4255019, 0.3747997, 0.1873246, 0.2565850, 0.1914687,
  0.3671139, 0.1276162, 0.3537677, 0.4076773, 0.1181683, 0.7192769, 0.2186738, 0.2885858, 0.4734213,
  0.0072575, 0.0765674, 0.0898227, 0.3649966, 0.2496215, 0.1702205, 0.0710704, 0.3869004, 0.3349850,
  0.1886938, 0.3514959, 0.4643647, 0.4223959, 0.3594954, 0.2522124, 0.4105392, 0.2470788, 0.2545409,
  0.3583593, 0.2345200, 0.0271059, 0.3803033, 0.1930780, 0.4567223, 0.0613140, 0.2441548, 0.4808156,
  0.3853460, 0.4859754, 0.4806673, 0.2801995, 0.3858915, 0.0090301, 0.4087827, 0.3671360, 0.2667392,
  0.4641679, 0.4647529, 0.3445000, 0.1198545, 0.0282007, 0.1829597, 0.0539266, 0.0914677, 0.1638856,
  0.1201562, 0.4388565, 0.2036911, 0.2046127, 0.4811504, 0.3038480, 0.0642898, 0.2031245, 0.1680801,
  0.0394903, 0.4766186, 0.2023225, 0.0175873, 0.3034133, 0.4123132, 0.0379968, 0.2168891, 0.0675915,
  0.4039690, 0.3417962, 0.2112697, 0.2400451, 0.4558193, 0.1334496, 0.0195393, 0.3627390, 0.4262152,
  0.0403542, 0.3081270, 0.1527164, 0.0121030, 0.6241815, 0.4913400, 0.0157230, 0.3200969, 0.0437878,
  0.3018721, 0.0975544, 0.1886938, 0.8753713, 0.0700827, 0.2364397, 0.4924574, 0.2563165, 0.1126200,
  0.1547797, 0.0241622, 0.3814965, 0.3526533, 0.2161066, 0.2911978, 0.4464823, 0.3577181, 0.3152088,
  0.3317510, 0.2863414, 0.2801995, 0.0700827, 0.3417172, 0.2610632, 0.4037673, 0.1736438, 0.0880198,
  0.4559108, 0.1121846, 0.7814473, 0.3779829, 0.3405251, 0.1208012, 0.4304054, 0.1807327, 0.0049234,
  0.1778966, 0.3514959, 0.2046946, 0.2997384, 0.2013881, 0.0548181, 0.3352703, 0.2054045, 0.3389475,
  0.1449403, 0.3906285, 0.0580903, 0.3582265, 0.1743012, 0.2712877, 0.4273703, 0.4566499, 0.0667344,
  0.0676206, 0.1248124, 0.0026571, 0.2774455, 0.0032627, 0.1753686, 0.3725724, 0.4469863, 0.3858915,
  0.2046946, 0.3794979, 0.4016317, 0.3370037, 0.0815573, 0.4647915, 0.0563985, 0.4203163, 0.0915991,
  0.0276749, 0.3857849, 0.0461729, 0.3978934, 0.3614717, 0.3266448, 0.7978231, 0.4209127, 0.2912005,
  0.3953015, 0.4388565, 0.3417172, 0.2997384, 0.4108247, 0.2899171, 0.1479114, 0.4418810, 0.0634220,
  0.0929668, 0.4055436, 0.2457036, 0.3701515, 0.4134036, 0.0947451, 0.2785034, 0.3162361, 0.4036728,
  0.3741804, 0.4563937, 0.4904932, 0.1492740, 0.4887115, 0.4127654, 0.1542346, 0.1914687, 0.0090301,
  0.4108247, 0.3533593, 0.4300368, 0.3572507, 0.1412494, 0.4373029, 0.3273854, 0.2602280, 0.1690700,
  0.4756982, 0.0009060, 0.2393224, 0.0014211, 0.4101384, 0.1580024, 0.0231310, 0.5838791, 0.4132268,
  0.2181222, 0.3529412, 0.3698108, 0.2233849, 0.0987368, 0.2610632, 0.2013881, 0.3533593, 0.2908257,
  0.3609885, 0.2026076, 0.2999429, 0.2079948, 0.2704931, 0.2946429, 0.3154255, 0.0627621, 0.2774129,
  0.4206699, 0.0670598, 0.2860273, 0.3919643, 0.2397596, 0.2703603, 0.4632739, 0.4124186, 0.5805955,
  0.1959839, 0.3950751, 0.0841055, 0.3794979, 0.4300368, 0.4032480, 0.2078872, 0.0094638, 0.2755707,
  0.0376010, 0.4909527, 0.3097841, 0.2355419, 0.0072671, 0.2746342, 0.0053361, 0.1994108, 0.3969467,
  0.2509201, 0.3298818, 0.3886021, 0.0245763, 0.4638373, 0.4052183, 0.4148478, 0.0242814, 0.2414050,
  0.2932298, 0.0475468, 0.4618716, 0.4032480, 0.8676416, 0.4028524, 0.3012557, 0.1360013, 0.1863026,
  0.1490197, 0.0643736, 0.3395792, 0.2925389, 0.3659366, 0.4948683, 0.4953563, 0.1047673, 0.0355901,
  0.0856992, 0.1778870, 0.0851296, 0.3532749, 0.0398270, 0.0630765, 0.3671139, 0.4643647, 0.2400451,
  0.2364397, 0.4431843, 0.1266264, 0.4763364, 0.7873081, 0.2751093, 0.4222012, 0.1121367, 0.4474346,
  0.3652081, 0.1600931, 0.0614609, 0.0204758, 0.1615355, 0.4293712, 0.3882434, 0.6431416, 0.0548181,
  0.2899171, 0.3634890, 0.4412351, 0.1490288, 0.0447601, 0.4229826, 0.3807294, 0.0672451, 0.2775799,
  0.4666647, 0.4085002, 0.1297752, 0.1563804, 0.1522877, 0.2532282, 0.2805034, 0.1651538, 0.1046609,
  0.1760083, 0.2195207, 0.1705101, 0.1276162, 0.4558193, 0.4924574, 0.3572507, 0.3401189, 0.0565680,
  0.4332137, 0.2150277, 0.4809324, 0.2783410, 0.1570549, 0.4891155, 0.4529251, 0.2209245, 0.3658022,
  0.3961954, 0.3788675, 0.1621254, 0.3969478, 0.3886663, 0.4372073, 0.3537677, 0.4037673, 0.2908257,
  0.4028524, 0.4431843, 0.7202524, 0.3443225, 0.3538920, 0.3133293, 0.4439365, 0.1412494, 0.3012557,
  0.3634890, 0.3401189, 0.1250412, 0.4831129, 0.0737263, 0.3228796, 0.0975274, 0.1318027, 0.4008097,
  0.1548646, 0.2036911, 0.1334496, 0.4016317, 0.1479114, 0.3609885, 0.1360013, 0.1494316, 0.4203018,
  0.2847606, 0.1855530, 0.3948809, 0.1457941, 0.1710113, 0.4871747, 0.0616420, 0.2720916, 0.1494316,
  0.3342525, 0.4981484, 0.2835164, 0.2201109, 0.3569505, 0.3228796, 0.2664382, 0.1461955, 0.2912845,
  0.2178672, 0.0091858, 0.3888402, 0.3213883, 0.1017065, 0.2137529, 0.2078872, 0.1863026, 0.0565680,
  0.2497744, 0.0917027, 0.3077455, 0.2898162, 0.1962939, 0.0667715, 0.0511321, 0.4857582, 0.0757288,
  0.4719980, 0.0990155, 0.0358659, 0.3427203, 0.4911953, 0.0026993, 0.3121863, 0.3129920, 0.4076773,
  0.4087827, 0.0195393, 0.3352703, 0.1490197, 0.4412351, 0.4203018, 0.3342525, 0.4991112, 0.3198876,
  0.0273423, 0.1726720, 0.2868139, 0.0167729, 0.3167321, 0.3240158, 0.1181683, 0.4223959, 0.2054045,
  0.4418810, 0.2026076, 0.3298818, 0.4332137, 0.4679078, 0.2938424, 0.2349892, 0.3265936, 0.4161196,
  0.0540847, 0.4671349, 0.4922210, 0.4333457, 0.2783662, 0.3295173, 0.1414430, 0.4789151, 0.5482149,
  0.2405941, 0.0873055, 0.4915100, 0.1031984, 0.6396587, 0.3054300, 0.4373029, 0.2999429, 0.1490288,
  0.2150277, 0.4679078, 0.4463057, 0.3714156, 0.1611302, 0.3379962, 0.4654491, 0.0994459, 0.4963855,
  0.0027219, 0.2011968, 0.2413642, 0.0713272, 0.0186765, 0.5553801, 0.0508773, 0.4655451, 0.3939655,
  0.4681202, 0.2046127, 0.2079948, 0.0447601, 0.2938424, 0.4463057, 0.4189366, 0.4805591, 0.4724835,
  0.4029289, 0.3810731, 0.3855192, 0.2898832, 0.3895027, 0.3307955, 0.3594954, 0.4811504, 0.1736438,
  0.3370037, 0.2704931, 0.0094638, 0.4229826, 0.2349892, 0.1488369, 0.3299349, 0.3658398, 0.2805756,
  0.1943161, 0.1270155, 0.2077195, 0.1249269, 0.0572191, 0.3217881, 0.1812549, 0.4356323, 0.2024299,
  0.4955283, 0.2777625, 0.0642578, 0.4278218, 0.3742032, 0.2228894, 0.3627390, 0.0880198, 0.1250412,
  0.1488369, 0.6981739, 0.2518100, 0.2364128, 0.4279115, 0.4212285, 0.4749146, 0.2284694, 0.1864383,
  0.0079268, 0.2446150, 0.4631400, 0.2501489, 0.4844082, 0.0522814, 0.5977305, 0.0263783, 0.2522124,
  0.2755707, 0.3886021, 0.2847606, 0.4991112, 0.0239194, 0.4028964, 0.2294849, 0.2998522, 0.1320064,
  0.0275548, 0.1151714, 0.2652366, 0.2787146, 0.2884416, 0.1149032, 0.3923617, 0.3807294, 0.0540387,
  0.2807390, 0.0142855, 0.3054538, 0.0743166, 0.1352609, 0.3096741, 0.2561502, 0.7192769, 0.4809324,
  0.4981484, 0.3299349, 0.2030550, 0.2820974, 0.3606436, 0.1871530, 0.2116934, 0.1441479, 0.2874195,
  0.3848211, 0.3917919, 0.4778197, 0.2946429, 0.4189366, 0.2518100, 0.2030550, 0.4912895, 0.1356941,
  0.2409017, 0.4399648, 0.2600915, 0.1039219, 0.0522639, 0.1473574, 0.1156571, 0.2768389, 0.4478964,
  0.1246019, 0.1488771, 0.3747582, 0.0281233, 0.0742416, 0.4283062, 0.1612249, 0.4559108, 0.3389475,
  0.1266264, 0.0672451, 0.3265936, 0.2820974, 0.3309392, 0.0915848, 0.0509763, 0.4962989, 0.4802843,
  0.0841302, 0.1918956, 0.3192275, 0.4662680, 0.1974726, 0.0810854, 0.2783410, 0.4912895, 0.3111583,
  0.4521906, 0.2043965, 0.3393941, 0.2771504, 0.4931641, 0.1747926, 0.0280012, 0.3078630, 0.0456258,
  0.1170995, 0.0880413, 0.2797376, 0.2573348, 0.2639170, 0.3364275, 0.2011374, 0.0130792, 0.1121846,
  0.1449403, 0.0245763, 0.2775799, 0.1570549, 0.4161196, 0.0239194, 0.3309392, 0.3111583, 0.3020653,
  0.0100230, 0.4954931, 0.4227756, 0.3662207, 0.4669757, 0.1495063, 0.4342381, 0.0752723, 0.4105392,
  0.4262152, 0.3273854, 0.3154255, 0.1356941, 0.1063635, 0.3477053, 0.4418667, 0.4065750, 0.2158301,
  0.0978730, 0.3474138, 0.0941925, 0.2502904, 0.4167871, 0.1238085, 0.2055745, 0.3906285, 0.4763364,
  0.3606436, 0.2409017, 0.2856070, 0.4519934, 0.0640926, 0.3494168, 0.2239768, 0.1506959, 0.3404586,
  0.0097513, 0.3356108, 0.2007709, 0.0563368, 0.1196116, 0.0815573, 0.4891155, 0.4399648, 0.1063635,
  0.0469109, 0.4409516, 0.2269343, 0.1728651, 0.4690269, 0.4568825, 0.3838028, 0.1701081, 0.2478454,
  0.3553386, 0.3348420, 0.2563165, 0.0580903, 0.4647915, 0.2602280, 0.0643736, 0.7873081, 0.4831129,
  0.0540847, 0.3714156, 0.4521906, 0.0529002, 0.1118892, 0.3946897, 0.2185860, 0.3582265, 0.0737263,
  0.4671349, 0.1611302, 0.0540387, 0.2600915, 0.2043965, 0.0178831, 0.3605796, 0.4215185, 0.3441654,
  0.3192719, 0.2912215, 0.2253530, 0.4059448, 0.0770738, 0.2236069, 0.7638237, 0.2186738, 0.1126200,
  0.7814473, 0.1743012, 0.1690700, 0.2751093, 0.4922210, 0.3379962, 0.2364128, 0.3477053, 0.7218004,
  0.3724327, 0.2531753, 0.0252278, 0.2816279, 0.1346799, 0.1643871, 0.3633022, 0.1110411, 0.2297511,
  0.4249687, 0.4478221, 0.2225533, 0.2077467, 0.4349648, 0.3779829, 0.2712877, 0.4638373, 0.4666647,
  0.2835164, 0.4333457, 0.4028734, 0.3229839, 0.3908435, 0.3720633, 0.3528297, 0.4553215, 0.1170026,
  0.4753753, 0.0282417, 0.1620676, 0.2931856, 0.3671360, 0.1547797, 0.4052183, 0.4222012, 0.4085002,
  0.3198876, 0.3393941, 0.4418667, 0.3724327, 0.0297363, 0.4194855, 0.1562718, 0.1693750, 0.3152241,
  0.3387593, 0.2933232, 0.0599440, 0.1064471, 0.2469246, 0.0528503, 0.0321264, 0.0181036, 0.2223779,
  0.2667392, 0.4756982, 0.4148478, 0.1855530, 0.2201109, 0.3658398, 0.4028964, 0.4194855, 0.1724464,
  0.2184300, 0.4806912, 0.3213868, 0.4946703, 0.0183148, 0.4068079, 0.3882787, 0.1461515, 0.3377662,
  0.1434079, 0.1656042, 0.1153671, 0.0297401, 0.0722899, 0.3818015, 0.0376010, 0.1297752, 0.4529251,
  0.2497744, 0.4654491, 0.4805591, 0.3020653, 0.0469109, 0.2531753, 0.4028734, 0.3104094, 0.0983794,
  0.3041750, 0.7444220, 0.0469955, 0.4269330, 0.3876660, 0.4697597, 0.3013350, 0.2885858, 0.3038480,
  0.1121367, 0.1563804, 0.4279115, 0.2184300, 0.3897764, 0.1165223, 0.1623044, 0.3694641, 0.4647038,
  0.1950430, 0.0223306, 0.4734213, 0.0642898, 0.3405251, 0.0563985, 0.2209245, 0.3569505, 0.0994459,
  0.4806912, 0.3142114, 0.1688596, 0.2013356, 0.3616973, 0.1345261, 0.3665765, 0.1457076, 0.2400093,
  0.4413908, 0.1208012, 0.4203163, 0.4474346, 0.1522877, 0.4963855, 0.2771504, 0.3932629, 0.2256821,
  0.3466487, 0.1397347, 0.4893270, 0.1162840, 0.4933484, 0.0921099, 0.0072575, 0.0241622, 0.4273703,
  0.0009060, 0.3652081, 0.3228796, 0.0917027, 0.2805756, 0.1871530, 0.4409516, 0.0252278, 0.1562718,
  0.3213868, 0.0526326, 0.2417610, 0.1361428, 0.4773201, 0.2157922, 0.2075818, 0.1745262, 0.2272112,
  0.0765674, 0.4641679, 0.2031245, 0.0403542, 0.3814965, 0.2664382, 0.2294849, 0.3229839, 0.3104094,
  0.3142114, 0.1920804, 0.3407301, 0.3448193, 0.4478265, 0.3265684, 0.1142358, 0.4909527, 0.4724835,
  0.2998522, 0.1039219, 0.0100230, 0.3908435, 0.1693750, 0.1674092, 0.0846982, 0.3384884, 0.1067837,
  0.3844901, 0.1491689, 0.4107678, 0.5988698, 0.2176154, 0.4771985, 0.1680801, 0.0915991, 0.0634220,
  0.2393224, 0.0627621, 0.2532282, 0.3658022, 0.7202524, 0.3948809, 0.1943161, 0.4931641, 0.0983794,
  0.1688596, 0.4067034, 0.2580674, 0.4757213, 0.3928346, 0.1995547, 0.2107771, 0.3768051, 0.3630947,
  0.4647529, 0.3081270, 0.3077455, 0.0522639, 0.1747926, 0.2013356, 0.3932629, 0.0526326, 0.3694007,
  0.0972740, 0.3075456, 0.2167318, 0.4610244, 0.0345871, 0.3439550, 0.2221761, 0.0400448, 0.0394903,
  0.4566499, 0.0014211, 0.2774129, 0.1600931, 0.2805034, 0.3961954, 0.1461955, 0.0027219, 0.1270155,
  0.0915848, 0.0529002, 0.0703681, 0.0187762, 0.2613653, 0.1867701, 0.1502444, 0.3600508, 0.4655130,
  0.3398629, 0.4028377, 0.1709328, 0.2641133, 0.2825163, 0.1023570, 0.2470788, 0.4304054, 0.3395792,
  0.2783662, 0.3152241, 0.4067034, 0.9997413, 0.3054797, 0.4133712, 0.0630975, 0.0166616, 0.3381947,
  0.2909326, 0.2139573, 0.0475201, 0.2854958, 0.3741169, 0.0667344, 0.0929668, 0.4101384, 0.3097841,
  0.2011968, 0.2807390, 0.2856070, 0.4946703, 0.3897764, 0.1920804, 0.0187762, 0.3054797, 0.0461345,
  0.2358043, 0.4405020, 0.2239718, 0.0232168, 0.2595815, 0.1997993, 0.3136983, 0.0550861, 0.4924752,
  0.0242814, 0.2898162, 0.0273423, 0.0280012, 0.3387593, 0.4133712, 0.1691249, 0.4277944, 0.3262424,
  0.2545409, 0.3445000, 0.4766186, 0.1527164, 0.2355419, 0.1457941, 0.1962939, 0.4212285, 0.4065750,
  0.1674092, 0.0040041, 0.3576335, 0.6885277, 0.0684911, 0.0949263, 0.3370988, 0.4251885, 0.4918659,
  0.3733355, 0.3583593, 0.2023225, 0.1580024, 0.4206699, 0.2414050, 0.0614609, 0.4749146, 0.2816279,
  0.0183148, 0.1165223, 0.3407301, 0.0630975, 0.3476292, 0.2974767, 0.0964920, 0.2228194, 0.2653476,
  0.0658719, 0.3992334, 0.4709083, 0.1198545, 0.0204758, 0.3788675, 0.3228796, 0.3295173, 0.2413642,
  0.2284694, 0.0178831, 0.4068079, 0.1623044, 0.0846982, 0.0461345, 0.1464626, 0.1254936, 0.4546162,
  0.0599609, 0.2089537, 0.0068666, 0.0161616, 0.4871525, 0.3142720, 0.2925389, 0.2912845, 0.0667715,
  0.2116934, 0.3078630, 0.4519934, 0.3616973, 0.2256821, 0.3476292, 0.1306226, 0.2562920, 0.1834991,
  0.1524191, 0.4803574, 0.0404749, 0.3691756, 0.0898227, 0.0282007, 0.0121030, 0.4055436, 0.0670598,
  0.1615355, 0.1710113, 0.0511321, 0.1414430, 0.1864383, 0.0640926, 0.1346799, 0.3882787, 0.3694007,
  0.0812578, 0.3378220, 0.2461788, 0.3674253, 0.4063063, 0.4194439, 0.3649966, 0.2457036, 0.0072671,
  0.2178672, 0.1473574, 0.0509763, 0.0456258, 0.2158301, 0.3041750, 0.3694641, 0.1306226, 0.0812578,
  0.4179677, 0.0273935, 0.1376181, 0.1237823, 0.0175873, 0.0231310, 0.2860273, 0.4789151, 0.4029289,
  0.1320064, 0.4954931, 0.1643871, 0.7444220, 0.2580674, 0.0972740, 0.2613653, 0.3378220, 0.0734471,
  0.5716440, 0.3270837, 0.4374486, 0.3034133, 0.6241815, 0.0091858, 0.1441479, 0.1170995, 0.2269343,
  0.3605796, 0.3633022, 0.1461515, 0.2417610, 0.4179677, 0.1296077, 0.4877253, 0.1591760, 0.4487811,
  0.4059546, 0.0100264, 0.2582222, 0.1829597, 0.0676206, 0.0276749, 0.5838791, 0.3659366, 0.4857582,
  0.0713272, 0.0275548, 0.1156571, 0.4215185, 0.3720633, 0.4647038, 0.1361428, 0.4757213, 0.0166616,
  0.2358043, 0.0040041, 0.0734471, 0.1602434, 0.0591811, 0.1030985, 0.1983638, 0.4710790, 0.4003320,
  0.1682306, 0.2496215, 0.1248124, 0.3701515, 0.1621254, 0.3443225, 0.4871747, 0.1726720, 0.2077195,
  0.0079268, 0.4962989, 0.1110411, 0.2440522, 0.4165031, 0.0252984, 0.3045145, 0.4441046, 0.4572209,
  0.2415059, 0.4238202, 0.0530627, 0.3857849, 0.4134036, 0.3919643, 0.4948683, 0.0142855, 0.2768389,
  0.1728651, 0.3466487, 0.3448193, 0.3384884, 0.3576335, 0.1296077, 0.1268078, 0.2563025, 0.1895228,
  0.3345918, 0.4166048, 0.4054141, 0.2596988, 0.4439297, 0.4482521, 0.4021524, 0.2345200, 0.3526533,
  0.0461729, 0.0947451, 0.4132268, 0.2397596, 0.4953563, 0.1651538, 0.2868139, 0.1151714, 0.4802843,
  0.4690269, 0.1118892, 0.2297511, 0.3528297, 0.0649494, 0.1603665, 0.3632484, 0.4808010, 0.3155171,
  0.0421940, 0.3556329, 0.3017929, 0.2835062, 0.2400539, 0.2746342, 0.1047673, 0.0757288, 0.3054538,
  0.0880413, 0.0978730, 0.4568825, 0.3441654, 0.1345261, 0.3381947, 0.2440522, 0.1453612, 0.0627209,
  0.4289585, 0.3434332, 0.1462075, 0.4489491, 0.0539266, 0.0026571, 0.3888402, 0.4719980, 0.3474138,
  0.3838028, 0.2933232, 0.3665765, 0.1867701, 0.0273935, 0.5716440, 0.1602434, 0.4165031, 0.3889723,
  0.1373989, 0.0271059, 0.4913400, 0.2161066, 0.2785034, 0.4293712, 0.0975274, 0.0616420, 0.0990155,
  0.4227756, 0.3377662, 0.0591811, 0.0649494, 0.4863133, 0.3123243, 0.3094676, 0.4548634, 0.3543404,
  0.3803033, 0.2911978, 0.5482149, 0.0186765, 0.3810731, 0.1249269, 0.4478964, 0.0941925, 0.4553215,
  0.1950430, 0.1464626, 0.2461788, 0.2376485, 0.4577443, 0.3152796, 0.4464823, 0.3162361, 0.0355901,
  0.3969478, 0.2797376, 0.1502444, 0.1376181, 0.1268078, 0.1453612, 0.8429500, 0.2124143, 0.2319805,
  0.1930780, 0.4123132, 0.2932298, 0.3213883, 0.2446150, 0.2874195, 0.1246019, 0.2573348, 0.2502904,
  0.3494168, 0.3192719, 0.1457076, 0.1397347, 0.3928346, 0.3075456, 0.1254936, 0.2563025, 0.4863133,
  0.2630258, 0.1192136, 0.1283403, 0.3361003, 0.3254332, 0.5111299, 0.4567223, 0.3978934, 0.4631400,
  0.2652366, 0.0841302, 0.2239768, 0.1434079, 0.3600508, 0.6885277, 0.2562920, 0.1030985, 0.0627209,
  0.3123243, 0.2376485, 0.6660228, 0.2737032, 0.0725528, 0.4906516, 0.1702205, 0.0157230, 0.3577181,
  0.2774455, 0.2181222, 0.0358659, 0.0572191, 0.0743166, 0.3662207, 0.4167871, 0.0599440, 0.0469955,
  0.4773201, 0.1995547, 0.2167318, 0.4655130, 0.2909326, 0.4405020, 0.2974767, 0.0252984, 0.6660228,
  0.4688708, 0.4444213, 0.2486204, 0.1080630, 0.3200969, 0.0032627, 0.3529412, 0.3882434, 0.3538920,
  0.3427203, 0.1918956, 0.2639170, 0.2912215, 0.4249687, 0.0223306, 0.3398629, 0.1834991, 0.4289585,
  0.1192136, 0.2737032, 0.4688708, 0.1463357, 0.3640917, 0.2703603, 0.0053361, 0.0856992, 0.3855192,
  0.3848211, 0.4669757, 0.2107771, 0.4028377, 0.4546162, 0.1895228, 0.1603665, 0.1891034, 0.1633865,
  0.3932415, 0.4255019, 0.1807327, 0.1994108, 0.1046609, 0.1318027, 0.0167729, 0.1352609, 0.1506959,
  0.1067837, 0.1709328, 0.4277944, 0.3270837, 0.1983638, 0.3345918, 0.4444213, 0.4795561, 0.3394504,
  0.1148512, 0.4211857, 0.0710704, 0.0914677, 0.0379968, 0.0437878, 0.3614717, 0.1778870, 0.1760083,
  0.4911953, 0.3167321, 0.5553801, 0.3217881, 0.3917919, 0.1488771, 0.3404586, 0.3844901, 0.2239718,
  0.0684911, 0.0599609, 0.4877253, 0.3045145, 0.4166048, 0.3094676, 0.1283403, 0.4126990, 0.0727838,
  0.3816538, 0.3677183, 0.3288944, 0.4250860, 0.3152088, 0.0475468, 0.2720916, 0.1017065, 0.2501489,
  0.2253530, 0.4478221, 0.1064471, 0.0949263, 0.3674253, 0.4441046, 0.4054141, 0.3361003, 0.3239112,
  0.1663671, 0.0782135, 0.4374697, 0.0613140, 0.6431416, 0.1812549, 0.1701081, 0.4059448, 0.4893270,
  0.2157922, 0.2139573, 0.0232168, 0.0964920, 0.1524191, 0.4710790, 0.4609937, 0.1566380, 0.0489285,
  0.2313439, 0.3747997, 0.3018721, 0.3317510, 0.2405941, 0.4778197, 0.3747582, 0.3192275, 0.1495063,
  0.1170026, 0.2469246, 0.1656042, 0.1162840, 0.3262424, 0.2228194, 0.2089537, 0.4803574, 0.3632484,
  0.1891034, 0.3239112, 0.1381195, 0.0077237, 0.4404407, 0.4807387, 0.4036728, 0.3698108, 0.3969467,
  0.3886663, 0.4844082, 0.4753753, 0.0528503, 0.2075818, 0.0475201, 0.3434332, 0.3889723, 0.3254332,
  0.4126990, 0.4609937, 0.1381195, 0.0022522, 0.3466910, 0.3860448, 0.1873246, 0.3266448, 0.2233849,
  0.4632739, 0.4372073, 0.3133293, 0.4008097, 0.4356323, 0.0281233, 0.4662680, 0.2595815, 0.2596988,
  0.4808010, 0.1638856, 0.2168891, 0.0049234, 0.1753686, 0.3741804, 0.4124186, 0.2024299, 0.2787146,
  0.3364275, 0.0321264, 0.1997993, 0.4374486, 0.4439297, 0.2124143, 0.2074694, 0.1906150, 0.1204390,
  0.2799277, 0.3869004, 0.2441548, 0.2863414, 0.1778966, 0.7978231, 0.5805955, 0.0851296, 0.0026993,
  0.0508773, 0.4342381, 0.3946897, 0.1153671, 0.1491689, 0.3155171, 0.4548634, 0.1633865, 0.4795561,
  0.0727838, 0.1663671, 0.1552885, 0.4808156, 0.4563937, 0.1959839, 0.0873055, 0.2884416, 0.0097513,
  0.0770738, 0.2225533, 0.4107678, 0.2653476, 0.4482521, 0.1462075, 0.3816538, 0.0782135, 0.1552885,
  0.1813836, 0.4904932, 0.4955283, 0.3356108, 0.2478454, 0.4269330, 0.1745262, 0.3370988, 0.4572209,
  0.3543404, 0.0725528, 0.0077237, 0.3415696, 0.1628898, 0.4335400, 0.0675915, 0.1492740, 0.4655451,
  0.2777625, 0.1149032, 0.2007709, 0.2400093, 0.0658719, 0.4063063, 0.1237823, 0.2486204, 0.4374697,
  0.0022522, 0.1201562, 0.3725724, 0.4209127, 0.3532749, 0.4439365, 0.3121863, 0.0642578, 0.0742416,
  0.2011374, 0.0563368, 0.0282417, 0.0297401, 0.3876660, 0.5988698, 0.4610244, 0.2641133, 0.1591760,
  0.2415059, 0.1906150, 0.1628898, 0.3853460, 0.4039690, 0.4887115, 0.4618716, 0.0398270, 0.4915100,
  0.4278218, 0.1974726, 0.4251885, 0.3992334, 0.0068666, 0.4003320, 0.4238202, 0.0421940, 0.3394504,
  0.3677183, 0.1566380, 0.1204390};

// TODO: Find a way to generate and validate test data without hardcoding them (issue #2485)
const std::vector<lanczos_inputs<int, float>> inputsf = {
  {2,
   34,
   10000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::SA,
   42,
   {0,   0,   0,   0,   3,   5,   6,   8,   9,   11,  16,  16,  18,  20,  23,  24,  27,
    30,  31,  33,  37,  37,  39,  41,  43,  44,  46,  46,  47,  49,  50,  50,  51,  53,
    57,  58,  59,  66,  67,  68,  69,  71,  72,  75,  78,  83,  86,  90,  93,  94,  96,
    98,  99,  101, 101, 104, 106, 108, 109, 109, 109, 109, 111, 113, 118, 120, 121, 123,
    124, 128, 132, 134, 136, 138, 139, 141, 145, 148, 151, 152, 154, 155, 157, 160, 164,
    167, 170, 170, 170, 173, 178, 179, 182, 184, 186, 191, 192, 196, 198, 198, 198},
   {44, 68, 74, 16, 36, 85, 34, 75, 61, 51, 83, 15, 33, 55, 69, 71, 18, 84, 70, 95, 71, 83,
    97, 83, 9,  36, 54, 4,  42, 46, 52, 11, 89, 31, 37, 74, 96, 36, 88, 56, 64, 68, 94, 82,
    35, 90, 50, 82, 85, 83, 19, 47, 94, 9,  44, 56, 79, 6,  25, 4,  15, 21, 52, 75, 79, 92,
    19, 72, 94, 94, 96, 80, 16, 54, 89, 46, 48, 63, 3,  33, 67, 73, 77, 46, 47, 75, 16, 43,
    45, 81, 32, 45, 68, 43, 55, 63, 27, 89, 8,  17, 36, 15, 42, 96, 9,  49, 22, 33, 77, 7,
    75, 78, 88, 43, 49, 66, 76, 91, 22, 82, 69, 63, 84, 44, 3,  23, 47, 81, 9,  65, 76, 92,
    12, 96, 9,  13, 38, 93, 44, 3,  19, 6,  36, 45, 61, 63, 69, 89, 44, 57, 94, 62, 33, 36,
    41, 46, 68, 24, 28, 64, 8,  13, 14, 29, 11, 66, 88, 5,  28, 93, 21, 62, 84, 18, 42, 50,
    76, 91, 25, 63, 89, 97, 36, 69, 72, 85, 23, 32, 39, 40, 77, 12, 19, 40, 54, 70, 13, 91},
   {0.4734894, 0.1402491, 0.7686475, 0.0416142, 0.2559651, 0.9360436, 0.7486080, 0.5206724,
    0.0374126, 0.8082515, 0.5993828, 0.4866583, 0.8907925, 0.9251201, 0.8566143, 0.9528994,
    0.4557763, 0.4907070, 0.4158074, 0.8311127, 0.9026024, 0.3103237, 0.5876446, 0.7585195,
    0.4866583, 0.4493615, 0.5909155, 0.0416142, 0.0963910, 0.6722401, 0.3468698, 0.4557763,
    0.1445242, 0.7720124, 0.9923756, 0.1227579, 0.7194629, 0.8916773, 0.4320931, 0.5840980,
    0.0216121, 0.3709223, 0.1705930, 0.8297898, 0.2409706, 0.9585592, 0.3171389, 0.0228039,
    0.4350971, 0.4939908, 0.7720124, 0.2722416, 0.1792683, 0.8907925, 0.1085757, 0.8745620,
    0.3298612, 0.7486080, 0.2409706, 0.2559651, 0.4493615, 0.8916773, 0.5540361, 0.5150571,
    0.9160119, 0.1767728, 0.9923756, 0.5717281, 0.1077409, 0.9368132, 0.6273088, 0.6616613,
    0.0963910, 0.9378265, 0.3059566, 0.3159291, 0.0449106, 0.9085807, 0.4734894, 0.1085757,
    0.2909013, 0.7787509, 0.7168902, 0.9691764, 0.2669757, 0.4389115, 0.6722401, 0.3159291,
    0.9691764, 0.7467896, 0.2722416, 0.2669757, 0.1532843, 0.0449106, 0.2023634, 0.8934466,
    0.3171389, 0.6594226, 0.8082515, 0.3468698, 0.5540361, 0.5909155, 0.9378265, 0.2909178,
    0.9251201, 0.2023634, 0.5840980, 0.8745620, 0.2624605, 0.0374126, 0.1034030, 0.3736577,
    0.3315690, 0.9085807, 0.8934466, 0.5548525, 0.2302140, 0.7827352, 0.0216121, 0.8262919,
    0.1646078, 0.5548525, 0.2658700, 0.2909013, 0.1402491, 0.3709223, 0.1532843, 0.5792196,
    0.8566143, 0.1646078, 0.0827300, 0.5810611, 0.4158074, 0.5188584, 0.9528994, 0.9026024,
    0.5717281, 0.7269946, 0.7787509, 0.7686475, 0.1227579, 0.5206724, 0.5150571, 0.4389115,
    0.1034030, 0.2302140, 0.0827300, 0.8961608, 0.7168902, 0.2624605, 0.4823034, 0.3736577,
    0.3298612, 0.9160119, 0.6616613, 0.7467896, 0.5792196, 0.8297898, 0.0228039, 0.8262919,
    0.5993828, 0.3103237, 0.7585195, 0.4939908, 0.4907070, 0.2658700, 0.0844443, 0.9360436,
    0.4350971, 0.6997072, 0.4320931, 0.3315690, 0.0844443, 0.1445242, 0.3059566, 0.6594226,
    0.8961608, 0.6498466, 0.9585592, 0.7827352, 0.6498466, 0.2812338, 0.1767728, 0.5810611,
    0.7269946, 0.6997072, 0.1705930, 0.1792683, 0.1077409, 0.9368132, 0.4823034, 0.8311127,
    0.7194629, 0.6273088, 0.2909178, 0.5188584, 0.5876446, 0.2812338},
   {-2.0369630, -1.7673520}}};

const std::vector<lanczos_inputs<int, double>> inputsd = {
  {2,
   34,
   10000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::SA,
   42,
   {0,   0,   0,   0,   3,   5,   6,   8,   9,   11,  16,  16,  18,  20,  23,  24,  27,
    30,  31,  33,  37,  37,  39,  41,  43,  44,  46,  46,  47,  49,  50,  50,  51,  53,
    57,  58,  59,  66,  67,  68,  69,  71,  72,  75,  78,  83,  86,  90,  93,  94,  96,
    98,  99,  101, 101, 104, 106, 108, 109, 109, 109, 109, 111, 113, 118, 120, 121, 123,
    124, 128, 132, 134, 136, 138, 139, 141, 145, 148, 151, 152, 154, 155, 157, 160, 164,
    167, 170, 170, 170, 173, 178, 179, 182, 184, 186, 191, 192, 196, 198, 198, 198},
   {44, 68, 74, 16, 36, 85, 34, 75, 61, 51, 83, 15, 33, 55, 69, 71, 18, 84, 70, 95, 71, 83,
    97, 83, 9,  36, 54, 4,  42, 46, 52, 11, 89, 31, 37, 74, 96, 36, 88, 56, 64, 68, 94, 82,
    35, 90, 50, 82, 85, 83, 19, 47, 94, 9,  44, 56, 79, 6,  25, 4,  15, 21, 52, 75, 79, 92,
    19, 72, 94, 94, 96, 80, 16, 54, 89, 46, 48, 63, 3,  33, 67, 73, 77, 46, 47, 75, 16, 43,
    45, 81, 32, 45, 68, 43, 55, 63, 27, 89, 8,  17, 36, 15, 42, 96, 9,  49, 22, 33, 77, 7,
    75, 78, 88, 43, 49, 66, 76, 91, 22, 82, 69, 63, 84, 44, 3,  23, 47, 81, 9,  65, 76, 92,
    12, 96, 9,  13, 38, 93, 44, 3,  19, 6,  36, 45, 61, 63, 69, 89, 44, 57, 94, 62, 33, 36,
    41, 46, 68, 24, 28, 64, 8,  13, 14, 29, 11, 66, 88, 5,  28, 93, 21, 62, 84, 18, 42, 50,
    76, 91, 25, 63, 89, 97, 36, 69, 72, 85, 23, 32, 39, 40, 77, 12, 19, 40, 54, 70, 13, 91},
   {0.4734894, 0.1402491, 0.7686475, 0.0416142, 0.2559651, 0.9360436, 0.7486080, 0.5206724,
    0.0374126, 0.8082515, 0.5993828, 0.4866583, 0.8907925, 0.9251201, 0.8566143, 0.9528994,
    0.4557763, 0.4907070, 0.4158074, 0.8311127, 0.9026024, 0.3103237, 0.5876446, 0.7585195,
    0.4866583, 0.4493615, 0.5909155, 0.0416142, 0.0963910, 0.6722401, 0.3468698, 0.4557763,
    0.1445242, 0.7720124, 0.9923756, 0.1227579, 0.7194629, 0.8916773, 0.4320931, 0.5840980,
    0.0216121, 0.3709223, 0.1705930, 0.8297898, 0.2409706, 0.9585592, 0.3171389, 0.0228039,
    0.4350971, 0.4939908, 0.7720124, 0.2722416, 0.1792683, 0.8907925, 0.1085757, 0.8745620,
    0.3298612, 0.7486080, 0.2409706, 0.2559651, 0.4493615, 0.8916773, 0.5540361, 0.5150571,
    0.9160119, 0.1767728, 0.9923756, 0.5717281, 0.1077409, 0.9368132, 0.6273088, 0.6616613,
    0.0963910, 0.9378265, 0.3059566, 0.3159291, 0.0449106, 0.9085807, 0.4734894, 0.1085757,
    0.2909013, 0.7787509, 0.7168902, 0.9691764, 0.2669757, 0.4389115, 0.6722401, 0.3159291,
    0.9691764, 0.7467896, 0.2722416, 0.2669757, 0.1532843, 0.0449106, 0.2023634, 0.8934466,
    0.3171389, 0.6594226, 0.8082515, 0.3468698, 0.5540361, 0.5909155, 0.9378265, 0.2909178,
    0.9251201, 0.2023634, 0.5840980, 0.8745620, 0.2624605, 0.0374126, 0.1034030, 0.3736577,
    0.3315690, 0.9085807, 0.8934466, 0.5548525, 0.2302140, 0.7827352, 0.0216121, 0.8262919,
    0.1646078, 0.5548525, 0.2658700, 0.2909013, 0.1402491, 0.3709223, 0.1532843, 0.5792196,
    0.8566143, 0.1646078, 0.0827300, 0.5810611, 0.4158074, 0.5188584, 0.9528994, 0.9026024,
    0.5717281, 0.7269946, 0.7787509, 0.7686475, 0.1227579, 0.5206724, 0.5150571, 0.4389115,
    0.1034030, 0.2302140, 0.0827300, 0.8961608, 0.7168902, 0.2624605, 0.4823034, 0.3736577,
    0.3298612, 0.9160119, 0.6616613, 0.7467896, 0.5792196, 0.8297898, 0.0228039, 0.8262919,
    0.5993828, 0.3103237, 0.7585195, 0.4939908, 0.4907070, 0.2658700, 0.0844443, 0.9360436,
    0.4350971, 0.6997072, 0.4320931, 0.3315690, 0.0844443, 0.1445242, 0.3059566, 0.6594226,
    0.8961608, 0.6498466, 0.9585592, 0.7827352, 0.6498466, 0.2812338, 0.1767728, 0.5810611,
    0.7269946, 0.6997072, 0.1705930, 0.1792683, 0.1077409, 0.9368132, 0.4823034, 0.8311127,
    0.7194629, 0.6273088, 0.2909178, 0.5188584, 0.5876446, 0.2812338},
   {-2.0369630, -1.7673520}}};

const std::vector<lanczos_inputs<int, double>> inputsd_SM = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::SM,
   42,
   rows<int>,
   cols<int>,
   vals<double>,
   {-0.03865971, -0.00056997}}};

const std::vector<lanczos_inputs<int, double>> inputsd_LM = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::LM,
   42,
   rows<int>,
   cols<int>,
   vals<double>,
   {-2.48497686, 5.47778263}}};

const std::vector<lanczos_inputs<int, double>> inputsd_LA = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::LA,
   42,
   rows<int>,
   cols<int>,
   vals<double>,
   {2.40271478, 5.47778263}}};

const std::vector<lanczos_inputs<int, double>> inputsd_SA = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::SA,
   42,
   rows<int>,
   cols<int>,
   vals<double>,
   {-2.48497686, -2.31603463}}};

const std::vector<lanczos_inputs<int, float>> inputsf_SM = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::SM,
   42,
   rows<int>,
   cols<int>,
   vals<float>,
   {-0.03865971, -0.00056997}}};

const std::vector<lanczos_inputs<int, float>> inputsf_LM = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::LM,
   42,
   rows<int>,
   cols<int>,
   vals<float>,
   {-2.48497686, 5.47778263}}};

const std::vector<lanczos_inputs<int, float>> inputsf_LA = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::LA,
   42,
   rows<int>,
   cols<int>,
   vals<float>,
   {2.40271478, 5.47778263}}};

const std::vector<lanczos_inputs<int, float>> inputsf_SA = {
  {2,
   20,
   100000,
   0,
   0,
   1e-15,
   raft::sparse::solver::LANCZOS_WHICH::SA,
   42,
   rows<int>,
   cols<int>,
   vals<float>,
   {-2.48497686, -2.31603463}}};

const std::vector<rmat_lanczos_inputs<int, float>> rmat_inputsf = {
  {50,
   100,
   10000,
   0,
   0,
   1e-9,
   raft::sparse::solver::LANCZOS_WHICH::SA,
   42,
   12,
   12,
   1,
   {-122.526794, -74.00686,   -59.698284,  -54.68617,   -49.686813, -34.02644,  -32.130703,
    -31.26906,   -30.32097,   -22.946098,  -20.497862,  -20.23817,  -19.269697, -18.42496,
    -17.675667,  -17.013401,  -16.734581,  -15.820215,  -15.73925,  -15.448187, -15.044634,
    -14.692028,  -14.127425,  -13.967386,  -13.6237755, -13.469393, -13.181225, -12.777589,
    -12.623185,  -12.55508,   -12.2874565, -12.053391,  -11.677346, -11.558279, -11.163732,
    -10.922034,  -10.7936945, -10.558049,  -10.205776,  -10.005316, -9.559181,  -9.491834,
    -9.242631,   -8.883637,   -8.765364,   -8.688508,   -8.458255,  -8.385196,  -8.217982,
    -8.0442095}}};

using LanczosTestF = lanczos_tests<int, float>;
TEST_P(LanczosTestF, Result) { Run(); }

using LanczosTestD = lanczos_tests<int, double>;
TEST_P(LanczosTestD, Result) { Run(); }

using LanczosTestD_SM = lanczos_tests<int, double>;
TEST_P(LanczosTestD_SM, Result) { Run(); }

using LanczosTestD_LA = lanczos_tests<int, double>;
TEST_P(LanczosTestD_LA, Result) { Run(); }

using LanczosTestD_LM = lanczos_tests<int, double>;
TEST_P(LanczosTestD_LM, Result) { Run(); }

using LanczosTestD_SA = lanczos_tests<int, double>;
TEST_P(LanczosTestD_SA, Result) { Run(); }

using LanczosTestF_SM = lanczos_tests<int, float>;
TEST_P(LanczosTestF_SM, Result) { Run(); }

using LanczosTestF_LA = lanczos_tests<int, float>;
TEST_P(LanczosTestF_LA, Result) { Run(); }

using LanczosTestF_LM = lanczos_tests<int, float>;
TEST_P(LanczosTestF_LM, Result) { Run(); }

using LanczosTestF_SA = lanczos_tests<int, float>;
TEST_P(LanczosTestF_SA, Result) { Run(); }

using RmatLanczosTestF = rmat_lanczos_tests<int, float>;
TEST_P(RmatLanczosTestF, Result) { Run(); }

INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestF, ::testing::ValuesIn(inputsf));
INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestD, ::testing::ValuesIn(inputsd));
INSTANTIATE_TEST_CASE_P(LanczosTests, RmatLanczosTestF, ::testing::ValuesIn(rmat_inputsf));

INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestD_SM, ::testing::ValuesIn(inputsd_SM));
INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestD_LA, ::testing::ValuesIn(inputsd_LA));
INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestD_LM, ::testing::ValuesIn(inputsd_LM));
INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestD_SA, ::testing::ValuesIn(inputsd_SA));

INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestF_SM, ::testing::ValuesIn(inputsf_SM));
INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestF_LA, ::testing::ValuesIn(inputsf_LA));
INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestF_LM, ::testing::ValuesIn(inputsf_LM));
INSTANTIATE_TEST_CASE_P(LanczosTests, LanczosTestF_SA, ::testing::ValuesIn(inputsf_SA));

}  // namespace raft::sparse
