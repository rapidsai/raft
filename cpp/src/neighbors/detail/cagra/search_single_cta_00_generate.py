# Copyright (c) 2023, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

header = """
/*
 * Copyright (c) 2023, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * NOTE: this file is generated by search_single_cta_00_generate.py
 *
 * Make changes there and run in this directory:
 *
 * > python search_single_cta_00_generate.py
 *
 */

#include <raft/neighbors/detail/cagra/search_single_cta_kernel-inl.cuh>

namespace raft::neighbors::experimental::cagra::detail::single_cta_search {


#define instantiate_single_cta_search_kernel(TEAM_SIZE,                                        \\
                                             BLOCK_SIZE,                                       \\
                                             BLOCK_COUNT,                                      \\
                                             MAX_ITOPK,                                        \\
                                             MAX_CANDIDATES,                                   \\
                                             TOPK_BY_BITONIC_SORT,                             \\
                                             MAX_DATASET_DIM,                                  \\
                                             DATA_T,                                           \\
                                             DISTANCE_T,                                       \\
                                             INDEX_T,                                          \\
                                             LOAD_T)                                           \\
  template __global__ void search_kernel<TEAM_SIZE,                                            \\
                                         BLOCK_SIZE,                                           \\
                                         BLOCK_COUNT,                                          \\
                                         MAX_ITOPK,                                            \\
                                         MAX_CANDIDATES,                                       \\
                                         TOPK_BY_BITONIC_SORT,                                 \\
                                         MAX_DATASET_DIM,                                      \\
                                         DATA_T,                                               \\
                                         DISTANCE_T,                                           \\
                                         INDEX_T,                                              \\
                                         LOAD_T>(INDEX_T* const result_indices_ptr,            \\
                                                 DISTANCE_T* const result_distances_ptr,       \\
                                                 const std::uint32_t top_k,                    \\
                                                 const DATA_T* const dataset_ptr,              \\
                                                 const std::size_t dataset_dim,                \\
                                                 const std::size_t dataset_size,               \\
                                                 const size_t dataset_ld,                      \\
                                                 const DATA_T* const queries_ptr,              \\
                                                 const INDEX_T* const knn_graph,               \\
                                                 const std::uint32_t graph_degree,             \\
                                                 const unsigned num_distilation,               \\
                                                 const uint64_t rand_xor_mask,                 \\
                                                 const INDEX_T* seed_ptr,                      \\
                                                 const uint32_t num_seeds,                     \\
                                                 std::uint32_t* const visited_hashmap_ptr,     \\
                                                 const std::uint32_t internal_topk,            \\
                                                 const std::uint32_t num_parents,              \\
                                                 const std::uint32_t min_iteration,            \\
                                                 const std::uint32_t max_iteration,            \\
                                                 std::uint32_t* const num_executed_iterations, \\
                                                 const std::uint32_t hash_bitlen,              \\
                                                 const std::uint32_t small_hash_bitlen,        \\
                                                 const std::uint32_t small_hash_reset_interval);

"""

trailer = """
#undef instantiate_single_cta_search_kernel

} // namespace raft::neighbors::experimental::cagra::detail::single_cta_search
"""

mxdim_team = [(128, 8), (256, 16), (512, 32), (1024, 32)]
block = [(64, 16), (128, 8), (256, 4), (512, 2), (1024, 1)]
itopk_candidates = [64, 128, 256]
itopk_size = [64, 128, 256, 512]
mxelem = [64, 128, 256]
load_types = ["uint4"]

rblock = [(256, 4), (512, 2), (1024, 1)]
rcandidates = [32]
rsize = [256, 512]

search_types = dict(
    float_uint32=("float", "uint32_t", "float"),  # data_t, idx_t, distance_t
    int8_uint32=("int8_t", "uint32_t", "float"),
    uint8_uint32=("uint8_t", "uint32_t", "float"),
)

# knn
for type_path, (data_t, idx_t, distance_t) in search_types.items():
    for (mxdim, team) in mxdim_team:
        path = f"search_single_cta_{type_path}_dim{mxdim}_t{team}.cu"
        with open(path, "w") as f:
            f.write(header)
            for load_t in load_types:
                for b in block:
                    for candidates in itopk_candidates:
                        for isize in itopk_size:
                            f.write(
                                f"instantiate_single_cta_search_kernel({team}, {b[0]}, {b[1]}, {isize}, {candidates}, 1, {mxdim},{data_t}, {distance_t}, {idx_t}, {load_t});\n"
                            )
                for b in rblock:
                    for candidates in rcandidates:
                        for isize in rsize:
                            f.write(
                                f"instantiate_single_cta_search_kernel({team}, {b[0]}, {b[1]}, {isize}, {candidates}, 0, {mxdim},{data_t}, {distance_t}, {idx_t}, {load_t});\n"
                            )
            f.write(trailer)
            # For pasting into CMakeLists.txt
            print(f"src/neighbors/detail/cagra/{path}")
